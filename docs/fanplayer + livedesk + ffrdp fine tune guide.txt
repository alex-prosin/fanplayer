+------------------------------------------+
 Fanplayer + livedesk + ffrdp parameter tuning guide
+------------------------------------------+

fanplayer
---------

avts_syncmode:
Audio and video synchronization mode, currently provides the following 4 modes:
0-Automatic, 1-File playback mode, 2-Live mode, do audio and video synchronization, 3-Live mode, give up audio and video synchronization

Mode 1-File playback mode, do not discard any audio and video packets from demux, and synchronize audio and video during playback

Mode 2-Live mode, do audio and video synchronization. The audio and video packets from demux will be discarded, and the number of packets finally retained is determined by video_bufpktn
And audio_bufpktn are determined by two parameters, do audio and video synchronization during playback

Mode 3-Live mode, give up audio and video synchronization. The audio and video packets from demux will be discarded, and the number of packets finally retained is determined by video_bufpktn
And audio_bufpktn are determined by two parameters, audio and video synchronization is not performed, audio rendering will ensure continuity, and video rendering will not be delayed

In automatic mode, fanplayer will automatically select the appropriate mode according to the playing url, and the file will be played in mode 1; the live broadcast stream will be played, such as
rtsp:// rtmp:// dshow:// will adopt mode 2 or 3; please check the actual code for details.

More special: ffrdp:// and avkcp:// both use 3 by default. If you need to change to mode 2, please modify the relevant code yourself


init_timeout and auto_reconnect:
These two parameters are used for automatic reconnection of the player, such as opening rtsp rtmp dshow. Take the millisecond ms as the unit, the general configuration is 5-10s is more appropriate

rtsp_transport:
Used to configure the transmission protocol used during rtsp playback, 0 is automatic, which is automatically determined by ffmpeg, 1 is udp, 2 is tcp

vdev_render_type:
On windows platform, 0-gdi, 1-d3d

video_hwaccel:
Configure to 1 to enable the hardware acceleration of the corresponding platform (if possible), the windows platform currently supports dxva2, and the android platform supports mediacodec
It should be noted that if you enable dxva2 hardware acceleration on the windows platform, you need to configure vdev_render_type to 1



livedesk
--------

-aac or -alaw
Choose to use aac or pcm alaw audio encoding method

-channels=
Number of audio collection channels, configurable as 1-mono, 2-stereo

-samplerate=
Audio sampling rate, configurable as 8000, 16000, 32000, 44100, 48000
It should be noted that if pcm alaw encoding is selected, the sampling rate will default to 8000

-abitrate=
This parameter is only valid for the aac encoding method, and is generally configured to be 32000 to 128000

-vwidth= and -vheight=
Used to specify the image resolution size after video capture and zooming.

-framerate=
Used to specify the frame rate

-vbitrate=
Used to specify the bit rate of video encoding. The current code uses x264's ABR rate control by default
This -vbitrate configuration corresponds to the average bit rate of ABR, and the upper limit bit rate is twice this value
Please check the relevant code for details. If you have special requirements, please modify the relevant code yourself.

The ffrdp protocol supports auto automatic bit rate mode, which will automatically adjust the encoding bit rate according to the real-time network conditions.
Also called adaptive bit rate. After configuring to auto mode, you need to configure an adaptive code rate table:

Refer to the relevant code in main.c:

+------------------------------------------------- ---------------------------------------+
if (rectype == 4 && ffrdpauto) {// setup adaptive bitrate list
    int blist[16] = {250000, 500000, 1000000, 1200000, 1400000, 1600000,
        1800000, 2000000, 2100000, 2200000, 2300000, 2400000, 2500000, 2600000, 2700000 };
    ffrdps_adaptive_bitrate_setup (live->ffrdps, blist, 15);
    ffrdps_adaptive_bitrate_enable(live->ffrdps, 1);
}
+------------------------------------------------- ---------------------------------------+
In this table, in the low code rate segment, the code rate increase (the difference between adjacent elements) can be configured to be relatively large, and to the high code rate segment, the code rate increase is as small as possible.
According to the actual bit rate bandwidth requirements and fine-tuned in accordance with this principle, a better adaptive bit rate effect can be obtained.


-rtsp= -rtmp= -mp4= -avkcps= -ffrdps=
Specify the recording mode (or protocol mode), corresponding to rtsp rtmp mp4 avkcp ffrdps
Use -mp4 to record to a file, you also need to specify -duration= video segmentation duration, in milliseconds



ffrdp
-----

FFRDP_MAX_MSS
The maximum mss value is generally set to 1500-8. 1500 is the MTU size of the UDP protocol. The ffrdp protocol has a 4-byte header and a 2-byte fec tail, and it is required to be aligned to 4 bytes.
It is not recommended to modify this value. If you want to use a smaller mss fragment size, you only need to enter the required smss value in the fourth parameter of ffrdp_init
In different network environments, the smss parameter may affect the transmission effect. It is recommended to decrease from the maximum value, then record the test effect, and select an optimal value

FFRDP_MIN_RTO and FFRDP_MAX_RTO
The timeout period for waiting for an ACK response after sending a data frame is called RTO. To a certain extent, RTO represents and measures the delay and congestion of the network.
FFRDP_MIN_RTO and FFRDP_MAX_RTO limit the range of RTO in the ffrdp protocol.
In order to reduce the delay in real-time audio and video transmission, you can adjust FFRDP_MAX_RTO appropriately, from 1000ms to 100ms step by step, then test the effect and select an optimal value.
If the value of FFRDP_MAX_RTO is set relatively small, it will cause the frequency of timeout retransmission to increase, if it is set relatively large, the delay will increase
The value of FFRDP_MIN_RTO is generally set to 20-100. If it is set too large, it will cause the delay to rise
These two values ​​are the key parameters that affect the delay and need to be tuned according to the actual situation. When debugging, pay attention to whether the counter_resend_ratio in ffrdp_dump will rise.
And whether the rto value in ffrdp_dump is stable (to avoid repeated jitter)

FFRDP_MAX_WAITSND
The maximum number of data frames waiting to be sent, if wait_snd is greater than this value, calling the ffrdp_send interface function will return failure
This value takes FFRDP_MSS_SIZE as the unit. Generally, it can be configured as 256-4096. For example, if it is configured as 256, it means that there will be similar in ffrdp
256 * (1500-8) = 381952, about 380KB of data cache. If ffrdp_send is called once and the data sent is relatively large, increase FFRDP_MAX_WAITSND accordingly
In addition, the memory space that can be allocated by the system should be considered at the same time. On PC or Android, this value can be set relatively large because the memory is sufficient.
On some embedded linux systems, in order to save memory, the configuration will be as small as possible.
For example, when transmitting 1080p h264/h265 encoding, if the maximum key frame is key_frame_size, you can consider configuring FFRDP_MAX_WAITSND as
key_frame_size * N / FFRDP_MSS_SIZE, N can be 2, 3, 4, 5 ... which is N times the key frame size

FFRDP_QUERY_CYCLE
After the sending window is used up (that is, the receiver did not receive the data in time), ffrdp will periodically query the receiver’s window size and other information (send query frames). This parameter corresponds to the query timeout.
In milliseconds.

FFRDP_FLUSH_TIMEOUT
ffrdp will try to assemble the data to be sent into a full data frame, that is, the size of FFRDP_MSS_SIZE, which can improve the sending efficiency.
FFRDP_FLUSH_TIMEOUT corresponds to the timeout period of waiting for assembling. If the data to be sent cannot be assembled into a full frame, then after this time, only short frames can be sent
Proper adjustment of this value can reduce the delay, but in some network environments, if there are too many short frames, the transmission efficiency will drop sharply and the packet loss rate will increase. So it can't be adjusted too small
In the actual tuning, adjust around 500ms, record the optimal value according to the test results, and pay attention to the changes of rto and counter_resend_ratio

FFRDP_DEAD_TIMEOUT
The network dead link (disconnection) detection timeout, the ffrdp_isdead interface function will comprehensively judge whether the network is disconnected according to the sending and ACK conditions and this timeout period.
Generally set to about 5s.

FFRDP_MIN_CWND_SIZE, FFRDP_DEF_CWND_SIZE, FFRDP_MAX_CWND_SIZE
Congestion window configuration, lower limit, default, upper limit. The congestion control algorithm is supported in ffrdp, which is basically the same as the algorithm of tcp.
In a local area network environment, FFRDP_MIN_CWND_SIZE is generally configured to be 16-32, FFRDP_MAX_CWND_SIZE is configured to be 32-64, and FFRDP_DEF_CWND_SIZE takes the middle value
Increasing the value of cwnd may reduce latency and increase throughput, but if it is set too large, it will cause a large number of packets to be sent and network congestion will be counterproductive.
It is recommended to tune in the range of 16-64, and select the optimal value according to the actual measurement. The debugging is to pay attention to the changes of rto and counter_resend_ratio at the same time

FFRDP_RECVBUF_SIZE
Receiving buffer size. Generally, as long as the receiving end (player end) can retrieve the data in time, this value does not need to be set too large, just 64KB-256KB.
For the sender, it can be set to a smaller value of 1KB-8KB, which can save memory

FFRDP_UDPSBUF_SIZE, FFRDP_UDPRBUF_SIZE
Corresponds to the send buffer size and receive buffer size of the underlying udp protocol.
As the receiving end, FFRDP_UDPRBUF_SIZE (receive buffer size) can be set to be larger, just keep the same with FFRDP_RECVBUF_SIZE, FFRDP_UDPSBUF_SIZE can be appropriate
Reduce it, such as 2-8 (FFRDP_MSS_SIZE + 6) to save memory
As the sender, FFRDP_UDPSBUF_SIZE (sending buffer size) should be set as consistent as possible with the number of FFRDP_MAX_CWND_SIZE, and FFRDP_UDPRBUF_SIZE can be adjusted appropriately
The configuration of these two parameters may also affect the counter_resend_ratio, please tune according to the actual measurement

FFRDP_SELECT_SLEEP
The delay mode of ffrdp_update is configured to 0 to use a fixed delay, and the delay time is specified by FFRDP_USLEEP_TIMEOUT
Configured as 1 The select-driven delay is a non-fixed delay, and the maximum timeout is specified by FFRDP_SELECT_TIMEOUT
Use select drive mode, you can have greater throughput and less cpu occupancy

FEC opening method
The last parameter of the ffrdp_init function is to specify the level of fec. If it is set to 8, after sending 7 actual data frames, send 1 fec data frame (12.5% ​​ratio)
After enabling fec, counter_resend_ratio (timeout retransmission ratio) can be effectively reduced. Turn off fec and configure the last parameter to 0.
The actual wifi weak network environment may have a large random packet loss rate, you can consider using 5-10 level fec for error correction, and pay attention to counter_resend_ratio
Whether it is down, pay attention to the changes of counter_fec_ok and counter_fec_failed
The fec level can be arbitrarily configured at the sending end, and the receiving end is compatible with any fec level configuration.


In the process of debugging all the parameters of ffrdp, be sure to check the data from ffrdp_dump to determine whether the current parameters are reasonable, focusing on rto, counter_resend_ratio, wait_snd, etc.




2020-12-1
rockcarry
